<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <RestoreSuccess Condition=" '$(RestoreSuccess)' == '' ">True</RestoreSuccess>
    <RestoreTool Condition=" '$(RestoreTool)' == '' ">NuGet</RestoreTool>
    <ProjectAssetsFile Condition=" '$(ProjectAssetsFile)' == '' ">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\HVNTER\.nuget\packages\;C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages</NuGetPackageFolders>
    <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.4.0</NuGetToolVersion>
  </PropertyGroup>
  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <SourceRoot Include="C:\Users\HVNTER\.nuget\packages\" />
    <SourceRoot Include="C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages\" />
  </ItemGroup>
  <ImportGroup Condition=" '$(TargetFramework)' == '' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)bannerlord.buildresources\1.1.0.104\buildMultiTargeting\Bannerlord.BuildResources.props" Condition="Exists('$(NuGetPackageRoot)bannerlord.buildresources\1.1.0.104\buildMultiTargeting\Bannerlord.BuildResources.props')" />
  </ImportGroup>
  <ItemGroup Condition=" '$(Language)' == 'C#' AND '$(TargetFramework)' == 'net472' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <Compile Include="$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\AllowNullAttribute.cs" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\AllowNullAttribute.cs')">
      <NuGetPackageId>Nullable</NuGetPackageId>
      <NuGetPackageVersion>1.3.1</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Nullable\AllowNullAttribute.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\DisallowNullAttribute.cs" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\DisallowNullAttribute.cs')">
      <NuGetPackageId>Nullable</NuGetPackageId>
      <NuGetPackageVersion>1.3.1</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Nullable\DisallowNullAttribute.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\DoesNotReturnAttribute.cs" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\DoesNotReturnAttribute.cs')">
      <NuGetPackageId>Nullable</NuGetPackageId>
      <NuGetPackageVersion>1.3.1</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Nullable\DoesNotReturnAttribute.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\DoesNotReturnIfAttribute.cs" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\DoesNotReturnIfAttribute.cs')">
      <NuGetPackageId>Nullable</NuGetPackageId>
      <NuGetPackageVersion>1.3.1</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Nullable\DoesNotReturnIfAttribute.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\MaybeNullAttribute.cs" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\MaybeNullAttribute.cs')">
      <NuGetPackageId>Nullable</NuGetPackageId>
      <NuGetPackageVersion>1.3.1</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Nullable\MaybeNullAttribute.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\MaybeNullWhenAttribute.cs" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\MaybeNullWhenAttribute.cs')">
      <NuGetPackageId>Nullable</NuGetPackageId>
      <NuGetPackageVersion>1.3.1</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Nullable\MaybeNullWhenAttribute.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\MemberNotNullAttribute.cs" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\MemberNotNullAttribute.cs')">
      <NuGetPackageId>Nullable</NuGetPackageId>
      <NuGetPackageVersion>1.3.1</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Nullable\MemberNotNullAttribute.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\MemberNotNullWhenAttribute.cs" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\MemberNotNullWhenAttribute.cs')">
      <NuGetPackageId>Nullable</NuGetPackageId>
      <NuGetPackageVersion>1.3.1</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Nullable\MemberNotNullWhenAttribute.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\NotNullAttribute.cs" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\NotNullAttribute.cs')">
      <NuGetPackageId>Nullable</NuGetPackageId>
      <NuGetPackageVersion>1.3.1</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Nullable\NotNullAttribute.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\NotNullIfNotNullAttribute.cs" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\NotNullIfNotNullAttribute.cs')">
      <NuGetPackageId>Nullable</NuGetPackageId>
      <NuGetPackageVersion>1.3.1</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Nullable\NotNullIfNotNullAttribute.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\NotNullWhenAttribute.cs" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\contentFiles\cs\net40\Nullable\NotNullWhenAttribute.cs')">
      <NuGetPackageId>Nullable</NuGetPackageId>
      <NuGetPackageVersion>1.3.1</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Nullable\NotNullWhenAttribute.cs</Link>
    </Compile>
  </ItemGroup>
  <ItemGroup Condition=" '$(Language)' == 'C#' AND '$(TargetFramework)' == 'net472' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <Compile Include="$(NuGetPackageRoot)isexternalinit\1.0.3\contentFiles\cs\net40\IsExternalInit\IsExternalInit.cs" Condition="Exists('$(NuGetPackageRoot)isexternalinit\1.0.3\contentFiles\cs\net40\IsExternalInit\IsExternalInit.cs')">
      <NuGetPackageId>IsExternalInit</NuGetPackageId>
      <NuGetPackageVersion>1.0.3</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>IsExternalInit\IsExternalInit.cs</Link>
    </Compile>
  </ItemGroup>
  <ItemGroup Condition=" '$(Language)' == 'C#' AND '$(TargetFramework)' == 'net472' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessCacheHandle.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessCacheHandle.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessCacheHandle.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Constructor.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Constructor.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Constructor.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Delegate.Constructor.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Delegate.Constructor.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Delegate.Constructor.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Delegate.Property.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Delegate.Property.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Delegate.Property.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Delegate.Shared.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Delegate.Shared.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Delegate.Shared.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Delegate.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Delegate.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Delegate.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Field.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Field.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Field.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.FieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.FieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.FieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Method.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Method.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Method.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Property.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.Property.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Property.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.StaticFieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.StaticFieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.StaticFieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.StructFieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.StructFieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.StructFieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\AccessTools2.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\CodeInstructionExtensions.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\CodeInstructionExtensions.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\CodeInstructionExtensions.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\HarmonyExtensions.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\HarmonyExtensions.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\HarmonyExtensions.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\Reflect.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\Reflect.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\Reflect.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.Constructor.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.Constructor.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.Constructor.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.Field.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.Field.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.Field.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.FieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.FieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.FieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.Method.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.Method.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.Method.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.Property.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.Property.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.Property.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.StaticFieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.StaticFieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.StaticFieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.StructFieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.StructFieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.StructFieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\SymbolExtensions2.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\Traverse2.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net45\Harmony.Extensions\Traverse2.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\Traverse2.cs</Link>
    </Compile>
  </ItemGroup>
  <ItemGroup Condition=" '$(Language)' == 'C#' AND '$(TargetFramework)' == 'net6' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <Compile Include="$(NuGetPackageRoot)isexternalinit\1.0.3\contentFiles\cs\net5.0\IsExternalInit\IsExternalInit.cs" Condition="Exists('$(NuGetPackageRoot)isexternalinit\1.0.3\contentFiles\cs\net5.0\IsExternalInit\IsExternalInit.cs')">
      <NuGetPackageId>IsExternalInit</NuGetPackageId>
      <NuGetPackageVersion>1.0.3</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>IsExternalInit\IsExternalInit.cs</Link>
    </Compile>
  </ItemGroup>
  <ItemGroup Condition=" '$(Language)' == 'C#' AND '$(TargetFramework)' == 'net6' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessCacheHandle.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessCacheHandle.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessCacheHandle.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Constructor.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Constructor.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Constructor.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Delegate.Constructor.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Delegate.Constructor.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Delegate.Constructor.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Delegate.Property.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Delegate.Property.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Delegate.Property.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Delegate.Shared.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Delegate.Shared.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Delegate.Shared.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Delegate.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Delegate.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Delegate.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Field.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Field.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Field.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.FieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.FieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.FieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Method.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Method.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Method.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Property.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.Property.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.Property.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.StaticFieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.StaticFieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.StaticFieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.StructFieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.StructFieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.StructFieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\AccessTools2.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\AccessTools2.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\CodeInstructionExtensions.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\CodeInstructionExtensions.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\CodeInstructionExtensions.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\HarmonyExtensions.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\HarmonyExtensions.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\HarmonyExtensions.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\Reflect.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\Reflect.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\Reflect.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.Constructor.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.Constructor.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.Constructor.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.Field.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.Field.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.Field.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.FieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.FieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.FieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.Method.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.Method.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.Method.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.Property.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.Property.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.Property.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.StaticFieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.StaticFieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.StaticFieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.StructFieldRef.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.StructFieldRef.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.StructFieldRef.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\SymbolExtensions2.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\SymbolExtensions2.cs</Link>
    </Compile>
    <Compile Include="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\Traverse2.cs" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\contentFiles\cs\net6.0\Harmony.Extensions\Traverse2.cs')">
      <NuGetPackageId>Harmony.Extensions</NuGetPackageId>
      <NuGetPackageVersion>3.2.0.77</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>Harmony.Extensions\Traverse2.cs</Link>
    </Compile>
  </ItemGroup>
  <ImportGroup Condition=" '$(TargetFramework)' == 'net472' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)nullable\1.3.1\build\Nullable.props" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\build\Nullable.props')" />
    <Import Project="$(NuGetPackageRoot)isexternalinit\1.0.3\build\IsExternalInit.props" Condition="Exists('$(NuGetPackageRoot)isexternalinit\1.0.3\build\IsExternalInit.props')" />
    <Import Project="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\build\Harmony.Extensions.props" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\build\Harmony.Extensions.props')" />
    <Import Project="$(NuGetPackageRoot)bannerlord.buildresources\1.1.0.104\build\Bannerlord.BuildResources.props" Condition="Exists('$(NuGetPackageRoot)bannerlord.buildresources\1.1.0.104\build\Bannerlord.BuildResources.props')" />
  </ImportGroup>
  <ImportGroup Condition=" '$(TargetFramework)' == 'net6' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)nullable\1.3.1\build\Nullable.props" Condition="Exists('$(NuGetPackageRoot)nullable\1.3.1\build\Nullable.props')" />
    <Import Project="$(NuGetPackageRoot)isexternalinit\1.0.3\build\IsExternalInit.props" Condition="Exists('$(NuGetPackageRoot)isexternalinit\1.0.3\build\IsExternalInit.props')" />
    <Import Project="$(NuGetPackageRoot)harmony.extensions\3.2.0.77\build\Harmony.Extensions.props" Condition="Exists('$(NuGetPackageRoot)harmony.extensions\3.2.0.77\build\Harmony.Extensions.props')" />
    <Import Project="$(NuGetPackageRoot)bannerlord.buildresources\1.1.0.104\build\Bannerlord.BuildResources.props" Condition="Exists('$(NuGetPackageRoot)bannerlord.buildresources\1.1.0.104\build\Bannerlord.BuildResources.props')" />
  </ImportGroup>
  <PropertyGroup Condition=" '$(TargetFramework)' == 'net472' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <PkgBUTR_Harmony_Analyzer Condition=" '$(PkgBUTR_Harmony_Analyzer)' == '' ">C:\Users\HVNTER\.nuget\packages\butr.harmony.analyzer\1.0.1.50</PkgBUTR_Harmony_Analyzer>
    <PkgBannerlord_BuildResources Condition=" '$(PkgBannerlord_BuildResources)' == '' ">C:\Users\HVNTER\.nuget\packages\bannerlord.buildresources\1.1.0.104</PkgBannerlord_BuildResources>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(TargetFramework)' == 'net6' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <PkgBUTR_Harmony_Analyzer Condition=" '$(PkgBUTR_Harmony_Analyzer)' == '' ">C:\Users\HVNTER\.nuget\packages\butr.harmony.analyzer\1.0.1.50</PkgBUTR_Harmony_Analyzer>
    <PkgBannerlord_BuildResources Condition=" '$(PkgBannerlord_BuildResources)' == '' ">C:\Users\HVNTER\.nuget\packages\bannerlord.buildresources\1.1.0.104</PkgBannerlord_BuildResources>
  </PropertyGroup>
</Project>